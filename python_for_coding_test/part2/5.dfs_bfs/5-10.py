"""
아이디어 : 방문 여부를 DFS 방식으로 조회하면서 확인한다. 
- DFS로 연결된 지점을 모두 방문. 방문하지 않은 지점이 나올 경우 새로운 얼음 틀이 등장했다는 것이기 때문에 count를 1 증가 시킨다! 
"""


n , m = 15, 14

graph = [
    [0,0,0,0,0,1,1,1,1,0,0,0,0,0],
    [1,1,1,1,1,1,0,1,1,1,1,1,1,0],
    [1,1,0,1,1,1,0,1,1,0,1,1,1,0],
    [1,1,0,1,1,1,0,1,1,0,0,0,0,0],
    [1,1,0,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,0,1,1,1,1,1,1,1,1,1,0,0],
    [1,1,0,0,0,0,0,0,0,1,1,1,1,1],
    [0,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [0,0,0,0,0,0,0,0,0,1,1,1,1,1],
    [0,1,1,1,1,1,1,1,1,1,1,0,0,0],
    [0,0,0,1,1,1,1,1,1,1,1,0,0,0],
    [0,0,0,0,0,0,0,1,1,1,1,0,0,0],
    [1,1,1,1,1,1,1,1,1,1,0,0,1,1],
    [1,1,1,0,0,0,1,1,1,1,1,1,1,1],
    [1,1,1,0,0,0,1,1,1,1,1,1,1,1]
]

def dfs(x,y):
    #좌표가 주어진 범위를 벗어나면 바로 종료
    if x <= -1 or x >= n or y <= -1 or y >= m:
        return False
    #방문하지 않은 경우
    if graph[x][y] == 0:
        graph[x][y] = 1
        #상, 하, 좌, 우 위치 확인
        dfs(x-1, y)
        dfs(x, y-1)
        dfs(x+1, y)
        dfs(x, y+1)
        return True 
    return False

result = 0
for i in range(n):
    for j in range(m):
        if dfs(i,j) == True:
            result += 1
print(result)